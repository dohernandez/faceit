{
  "swagger": "2.0",
  "info": {
    "title": "faceit",
    "description": "faceit is small microservice to manage Users.",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "FaceitService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/users": {
      "post": {
        "summary": "AddUser add new user.",
        "description": "Receives a request with user data. Responses whether the user was added successfully or not.",
        "operationId": "FaceitService_AddUser",
        "responses": {
          "204": {
            "description": "User was added successfully.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            },
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            },
            "examples": {
              "application/json": {
                "code": 400,
                "message": "Bad Request",
                "error": "error_id_uuid",
                "details": [
                  {
                    "field": "field",
                    "description": "invalid"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            },
            "examples": {
              "application/json": {
                "code": 500,
                "message": "message",
                "error": "error_id_uuid"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message represent user.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/faceitUserRequest"
            }
          }
        ],
        "tags": [
          "FaceitService"
        ]
      }
    },
    "/v1/users/{id}": {
      "patch": {
        "summary": "Update the user.",
        "description": "Receives a request with user data. Responses whether the user was updated successfully or not.",
        "operationId": "FaceitService_UpdateUser",
        "responses": {
          "204": {
            "description": "User was updated successfully.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            },
            "examples": {
              "application/json": {
                "code": 400,
                "message": "Bad Request",
                "error": "error_id_uuid",
                "details": [
                  {
                    "field": "field",
                    "description": "invalid"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            },
            "examples": {
              "application/json": {
                "code": 500,
                "message": "message",
                "error": "error_id_uuid"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaceitServiceUpdateUserBody"
            }
          }
        ],
        "tags": [
          "FaceitService"
        ]
      }
    }
  },
  "definitions": {
    "FaceitServiceUpdateUserBody": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "nickname": {
          "type": "string",
          "description": "Nickname of the user."
        },
        "passwordHash": {
          "type": "string",
          "description": "Password hash of the user."
        },
        "email": {
          "type": "string",
          "description": "Email of the user."
        },
        "country": {
          "type": "string",
          "description": "Country of the user."
        }
      },
      "description": "Request message represent user.",
      "title": "UserRequest"
    },
    "faceitUserRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the user."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "nickname": {
          "type": "string",
          "description": "Nickname of the user."
        },
        "passwordHash": {
          "type": "string",
          "description": "Password hash of the user."
        },
        "email": {
          "type": "string",
          "description": "Email of the user."
        },
        "country": {
          "type": "string",
          "description": "Country of the user."
        }
      },
      "description": "Request message represent user.",
      "title": "UserRequest",
      "required": [
        "id"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
