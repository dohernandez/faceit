syntax = "proto3";

option go_package = "github.com/dohernandez/faceit/internal/platform/service/pb/api";

package api.faceit;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "faceit"
    version: "1.0"
    description: "faceit is small microservice to manage Users."
  }
  schemes: HTTP;
  consumes: "application/json"
  produces: "application/json"
  responses: {
    key: "400"
    value: {
      description: "Bad Request.";
      examples: {
        key: "application/json"
        value: '{"code": 400,"message": "Bad Request","error": "Invalid argument","details": [{"field": "field", "description": "invalid"}]}'
      }
      schema: {
        json_schema: {
          ref: ".google.rpc.Status"
        }
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal error."
      examples: {
        key: "application/json"
        value: '{"code": 500, "message": "message","error": "error_id_uuid"}'
      }
      schema: {
        json_schema: {
          ref: ".google.rpc.Status"
        }
      }
    }
  }
};

// The API to manages users.
service FaceitService {
  // AddUser add new user.
  //
  // Receives a request with user data. Responses whether the user was added successfully or not.
  rpc AddUser(User) returns (google.protobuf.Empty) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl -d '{"first_name": "Alice", "last_name": "Bob", "nickname": "AB123", "password_hash": "supersecurepassword", "email": "alice@bob.com", "country": "UK"}' http://DOMAIN_NAME/v1/users
    option (google.api.http) = {
      post : "/v1/users"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "User was added successfully."
          examples: {
            key: "application/json"
            value: '{}'
          }
          schema: {
            json_schema: {
              ref: ".google.protobuf.Empty"
            }
          }
        }
      }
    };
  }

  // Update the user.
  //
  // Receives a request with user data. Responses whether the user was updated successfully or not.
  rpc UpdateUser(User) returns (google.protobuf.Empty) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl -X PATCH -d '{"first_name": "Alice", "last_name": "Bob", "nickname": "AB123", "country": "UK"}' http://DOMAIN_NAME/v1/users/26ef0140-c436-4838-a271-32652c72f6f2
    option (google.api.http) = {
      patch : "/v1/users/{id}"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "User was updated successfully."
          schema: {
            json_schema: {
              ref: ".google.protobuf.Empty"
            }
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "User not found."
          schema: {
            json_schema: {
              ref: ".google.protobuf.Empty"
            }
          }
        }
      }
    };
  }

  // Delete the user.
  //
  // Receives a request with user data id. Responses whether the user was deleted successfully or not.
  rpc DeleteUser(UserID) returns (google.protobuf.Empty) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl -X DELETE http://DOMAIN_NAME/v1/users/26ef0140-c436-4838-a271-32652c72f6f2
    option (google.api.http) = {
      delete : "/v1/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "User was deleted successfully."
          schema: {
            json_schema: {
              ref: ".google.protobuf.Empty"
            }
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "User not found."
          schema: {
            json_schema: {
              ref: ".google.protobuf.Empty"
            }
          }
        }
      }
    };
  }

  // ListUsersByCountry list users by country.
  //
  // Receives a request with country data. Responses a list of users.
  rpc ListUsersByCountry(UsersByCountry) returns (UserList) {
    // Client example (Assuming the service is hosted at the given 'DOMAIN_NAME'):
    // Client example:
    //   curl http://DOMAIN_NAME/v1/users?country=UK
    option (google.api.http) = {
      get : "/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "List of users by country paginated."
          schema: {
            json_schema: {
              ref: ".api.faceit.UserList"
            }
          }
        }
      }
    };
  };
}

message User {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "User"
      description: "Message represents user."
      required: ["id"]
    }
  };

  // ID of the user.
  string id = 1 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }, (buf.validate.field).string.uuid = true];

  // First name of the user.
  optional string first_name = 2 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }];
  // Last name of the user.
  optional string last_name = 3 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }];
  // Nickname of the user.
  optional string nickname = 4;
  // Password hash of the user.
  optional string password_hash = 5 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }, (buf.validate.field).cel = {
    message: "must not exceed 128 characters"
    expression: "this.size() <= 128"
  }];
  // Email of the user.
  optional string email = 6 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }, (buf.validate.field).cel = {
    message: "must be a valid email"
    expression: "this.isEmail()"
  }];
  // Country of the user.
  optional string country = 7 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }, (buf.validate.field).cel = {
    message: "must have 2 characters"
    expression: "this.size() == 2"
  }];
}

message UserID {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UserID"
      description: "Message represent user id."
    }
  };

  // ID of the user.
  string id = 1 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }, (buf.validate.field).string.uuid = true];
}

message UsersByCountry {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Users by country"
      description: "Message represents the search users by country."
      required: ["country"]
    }
  };

  // Country of the user.
  string country = 1 [(buf.validate.field).cel = {
    message: "must not be empty"
    expression: "this != ''"
  }, (buf.validate.field).cel = {
    message: "must have 2 characters"
    expression: "this.size() == 2"
  }];

  // The maximum number of user to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 users will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `UserList` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `UserList` must match
  // the call that provided the page token.
  string page_token = 3;
}

message UserList {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "UserListResponse"
      description: "Response message represent list of users."
    }
  };

  // List of users.
  repeated User users = 1;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}
