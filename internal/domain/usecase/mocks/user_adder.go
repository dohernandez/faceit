// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dohernandez/faceit/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// UserAdder is an autogenerated mock type for the UserAdder type
type UserAdder struct {
	mock.Mock
}

type UserAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *UserAdder) EXPECT() *UserAdder_Expecter {
	return &UserAdder_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function with given fields: ctx, u
func (_m *UserAdder) AddUser(ctx context.Context, u model.UserState) (*model.User, error) {
	ret := _m.Called(ctx, u)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserState) (*model.User, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserState) *model.User); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserState) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAdder_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type UserAdder_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - ctx context.Context
//   - u model.UserState
func (_e *UserAdder_Expecter) AddUser(ctx interface{}, u interface{}) *UserAdder_AddUser_Call {
	return &UserAdder_AddUser_Call{Call: _e.mock.On("AddUser", ctx, u)}
}

func (_c *UserAdder_AddUser_Call) Run(run func(ctx context.Context, u model.UserState)) *UserAdder_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserState))
	})
	return _c
}

func (_c *UserAdder_AddUser_Call) Return(_a0 *model.User, _a1 error) *UserAdder_AddUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAdder_AddUser_Call) RunAndReturn(run func(context.Context, model.UserState) (*model.User, error)) *UserAdder_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserAdder creates a new instance of UserAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAdder(t interface {
	mock.TestingT
	Cleanup(func())
},
) *UserAdder {
	mock := &UserAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
