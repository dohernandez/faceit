// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dohernandez/faceit/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// UserAddedNotifier is an autogenerated mock type for the UserAddedNotifier type
type UserAddedNotifier struct {
	mock.Mock
}

type UserAddedNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *UserAddedNotifier) EXPECT() *UserAddedNotifier_Expecter {
	return &UserAddedNotifier_Expecter{mock: &_m.Mock}
}

// NotifyUserAdded provides a mock function with given fields: ctx, u
func (_m *UserAddedNotifier) NotifyUserAdded(ctx context.Context, u *model.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAddedNotifier_NotifyUserAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyUserAdded'
type UserAddedNotifier_NotifyUserAdded_Call struct {
	*mock.Call
}

// NotifyUserAdded is a helper method to define mock.On call
//   - ctx context.Context
//   - u *model.User
func (_e *UserAddedNotifier_Expecter) NotifyUserAdded(ctx interface{}, u interface{}) *UserAddedNotifier_NotifyUserAdded_Call {
	return &UserAddedNotifier_NotifyUserAdded_Call{Call: _e.mock.On("NotifyUserAdded", ctx, u)}
}

func (_c *UserAddedNotifier_NotifyUserAdded_Call) Run(run func(ctx context.Context, u *model.User)) *UserAddedNotifier_NotifyUserAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *UserAddedNotifier_NotifyUserAdded_Call) Return(_a0 error) *UserAddedNotifier_NotifyUserAdded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserAddedNotifier_NotifyUserAdded_Call) RunAndReturn(run func(context.Context, *model.User) error) *UserAddedNotifier_NotifyUserAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserAddedNotifier creates a new instance of UserAddedNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAddedNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAddedNotifier {
	mock := &UserAddedNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
