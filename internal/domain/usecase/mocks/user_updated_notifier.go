// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dohernandez/faceit/internal/domain/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserUpdatedNotifier is an autogenerated mock type for the UserUpdatedNotifier type
type UserUpdatedNotifier struct {
	mock.Mock
}

type UserUpdatedNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUpdatedNotifier) EXPECT() *UserUpdatedNotifier_Expecter {
	return &UserUpdatedNotifier_Expecter{mock: &_m.Mock}
}

// NotifyUserAdded provides a mock function with given fields: ctx, id, info
func (_m *UserUpdatedNotifier) NotifyUserAdded(ctx context.Context, id uuid.UUID, info model.UserInfo) error {
	ret := _m.Called(ctx, id, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.UserInfo) error); ok {
		r0 = rf(ctx, id, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUpdatedNotifier_NotifyUserAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyUserAdded'
type UserUpdatedNotifier_NotifyUserAdded_Call struct {
	*mock.Call
}

// NotifyUserAdded is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - info model.UserInfo
func (_e *UserUpdatedNotifier_Expecter) NotifyUserAdded(ctx interface{}, id interface{}, info interface{}) *UserUpdatedNotifier_NotifyUserAdded_Call {
	return &UserUpdatedNotifier_NotifyUserAdded_Call{Call: _e.mock.On("NotifyUserAdded", ctx, id, info)}
}

func (_c *UserUpdatedNotifier_NotifyUserAdded_Call) Run(run func(ctx context.Context, id uuid.UUID, info model.UserInfo)) *UserUpdatedNotifier_NotifyUserAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(model.UserInfo))
	})
	return _c
}

func (_c *UserUpdatedNotifier_NotifyUserAdded_Call) Return(_a0 error) *UserUpdatedNotifier_NotifyUserAdded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUpdatedNotifier_NotifyUserAdded_Call) RunAndReturn(run func(context.Context, uuid.UUID, model.UserInfo) error) *UserUpdatedNotifier_NotifyUserAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUpdatedNotifier creates a new instance of UserUpdatedNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUpdatedNotifier(t interface {
	mock.TestingT
	Cleanup(func())
},
) *UserUpdatedNotifier {
	mock := &UserUpdatedNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
